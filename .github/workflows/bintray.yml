# This is a basic workflow to help you get started with Actions

name: Bintray Publish

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Gradle clean
        run: ./gradlew clean
      - name: Gradle build
        run: ./gradlew build # if test's failed, don't publish
      - name: Gradle :mirai-console:shadowjar
        run: ./gradlew :mirai-console:shadowjar
      - name: Gradle :mirai-console-pure:shadowjar
        run: ./gradlew :mirai-console-pure:shadowjar
      - name: Create a Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag:  
          tag_name: ${{ github.ref }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: Release ${{ github.ref }}
          # Text describing the contents of the tag.
          # body: # optional
          # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
          # draft: # optional
          # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
          # prerelease: # optional
      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The URL for uploading assets to the release
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # The path to the asset you want to upload
          asset_path: mirai-console/build/libs/mirai-console-pure-1.0-M2-all.jar
          # The name of the asset you want to upload
          asset_name: mirai-console-pure-${{ steps.create_release.outputs.tag }}-all.jar
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: application/jar
      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The URL for uploading assets to the release
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # The path to the asset you want to upload
          asset_path: mirai-console/build/libs/mirai-console-1.0-M2-all.jar
          # The name of the asset you want to upload
          asset_name: mirai-console-${{ steps.create_release.outputs.tag }}-all.jar
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: application/jar
